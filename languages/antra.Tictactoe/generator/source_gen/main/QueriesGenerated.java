package main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.query.QueryKeyImpl;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.place$hn3W);
  }
  public static Object propertyMacro_GetValue_4_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.player_X_or_O$8I_T);
  }
  public static Object propertyMacro_GetValue_7_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.place$2BND);
  }
  public static SNode sourceNodeQuery_1_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.player$Fb2t);
  }
  public static SNode sourceNodeQuery_5_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.trueBranch$koIr);
  }
  public static SNode sourceNodeQuery_5_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.falseBranch$koJp);
  }
  public static SNode sourceNodeQuery_5_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$cPqP);
  }
  public static SNode sourceNodeQuery_6_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.body$sJcu);
  }
  public static SNode sourceNodeQuery_6_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$sJbw);
  }
  public static SNode sourceNodeQuery_8_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.original$cffO);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.body$R9ti), LINKS.commands$H22w);
  }
  public static Iterable<SNode> sourceNodesQuery_3_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.commands$H22w);
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("4454718177899297848", new SNQ(i++));
    snqMethods.put("1963637181731021984", new SNQ(i++));
    snqMethods.put("1963637181732018063", new SNQ(i++));
    snqMethods.put("1963637181732231239", new SNQ(i++));
    snqMethods.put("1963637181732076019", new SNQ(i++));
    snqMethods.put("1963637181732076414", new SNQ(i++));
    snqMethods.put("1963637181732352475", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snqMethods.containsKey(id))) {
      return super.getSourceNodeQuery(identity);
    }
    return snqMethods.get(id);
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_1_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_5_0(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_5_1(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_5_2(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_6_0(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_6_1(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_8_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("216782544313034950", new SNsQ(i++));
    snsqMethods.put("6685837750318357369", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snsqMethods.containsKey(id))) {
      return super.getSourceNodesQuery(identity);
    }
    return snsqMethods.get(id);
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_0(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("2815060639985265138", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "mapBoard"));
    pvqMethods.put("7609913187192667489", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "5"));
    pvqMethods.put("216782544312741854", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "X"));
    pvqMethods.put("1963637181732173357", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "5"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_4_0(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_7_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty place$hn3W = MetaAdapterFactory.getProperty(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8252b4bL, 0x3dd25694a827b731L, "place");
    /*package*/ static final SProperty player_X_or_O$8I_T = MetaAdapterFactory.getProperty(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x27111abcbb8099afL, 0x3dd25694a81cd9b0L, "player_X_or_O");
    /*package*/ static final SProperty place$2BND = MetaAdapterFactory.getProperty(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecd1ae8eL, 0x1b403d9cecd1ff01L, "place");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink player$Fb2t = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x44f073d544acf79aL, 0x3dd25694a81cd9e8L, "player");
    /*package*/ static final SContainmentLink trueBranch$koIr = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3022a9353516e2fL, 0x3022a9353516e4bL, "trueBranch");
    /*package*/ static final SContainmentLink falseBranch$koJp = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3022a9353516e2fL, 0x3022a9353516e4dL, "falseBranch");
    /*package*/ static final SContainmentLink condition$cPqP = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3022a9353516e2fL, 0x1b403d9cecd1ae8aL, "condition");
    /*package*/ static final SContainmentLink body$sJcu = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecd851c4L, 0x1b403d9cecd851c7L, "body");
    /*package*/ static final SContainmentLink condition$sJbw = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecd851c4L, 0x1b403d9cecd851c5L, "condition");
    /*package*/ static final SContainmentLink original$cffO = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fccL, 0x1b403d9cece7c122L, "original");
    /*package*/ static final SContainmentLink body$R9ti = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x44f073d544acf79aL, 0x3dd25694a826df87L, "body");
    /*package*/ static final SContainmentLink commands$H22w = MetaAdapterFactory.getContainmentLink(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251fb1L, 0x3dd25694a8251fb2L, "commands");
  }
}
