package antra.Tictactoe.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractCommand = createDescriptorForAbstractCommand();
  /*package*/ final ConceptDescriptor myConceptBoard = createDescriptorForBoard();
  /*package*/ final ConceptDescriptor myConceptCommandList = createDescriptorForCommandList();
  /*package*/ final ConceptDescriptor myConceptEmptyLine = createDescriptorForEmptyLine();
  /*package*/ final ConceptDescriptor myConceptGameEnded = createDescriptorForGameEnded();
  /*package*/ final ConceptDescriptor myConceptIfStatement = createDescriptorForIfStatement();
  /*package*/ final ConceptDescriptor myConceptLogicalExpression = createDescriptorForLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptMove = createDescriptorForMove();
  /*package*/ final ConceptDescriptor myConceptNot = createDescriptorForNot();
  /*package*/ final ConceptDescriptor myConceptPlayer = createDescriptorForPlayer();
  /*package*/ final ConceptDescriptor myConceptWhile = createDescriptorForWhile();
  /*package*/ final ConceptDescriptor myConceptisTaken = createDescriptorForisTaken();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractCommand, myConceptBoard, myConceptCommandList, myConceptEmptyLine, myConceptGameEnded, myConceptIfStatement, myConceptLogicalExpression, myConceptMove, myConceptNot, myConceptPlayer, myConceptWhile, myConceptisTaken);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AbstractCommand:
        return myConceptAbstractCommand;
      case LanguageConceptSwitch.Board:
        return myConceptBoard;
      case LanguageConceptSwitch.CommandList:
        return myConceptCommandList;
      case LanguageConceptSwitch.EmptyLine:
        return myConceptEmptyLine;
      case LanguageConceptSwitch.GameEnded:
        return myConceptGameEnded;
      case LanguageConceptSwitch.IfStatement:
        return myConceptIfStatement;
      case LanguageConceptSwitch.LogicalExpression:
        return myConceptLogicalExpression;
      case LanguageConceptSwitch.Move:
        return myConceptMove;
      case LanguageConceptSwitch.Not:
        return myConceptNot;
      case LanguageConceptSwitch.Player:
        return myConceptPlayer;
      case LanguageConceptSwitch.While:
        return myConceptWhile;
      case LanguageConceptSwitch.isTaken:
        return myConceptisTaken;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbstractCommand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "AbstractCommand", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL);
    b.class_(false, true, false);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/4454718177898995437");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoard() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "Board", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x44f073d544acf79aL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/4967597748807071642");
    b.version(2);
    b.aggregate("player", 0x3dd25694a81cd9e8L).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x27111abcbb8099afL).optional(false).ordered(true).multiple(false).origin("4454718177898453480").done();
    b.aggregate("body", 0x3dd25694a826df87L).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251fb1L).optional(false).ordered(true).multiple(false).origin("4454718177899110279").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommandList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "CommandList", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251fb1L);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.AbstractCommand", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/4454718177898995633");
    b.version(2);
    b.aggregate("commands", 0x3dd25694a8251fb2L).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL).optional(true).ordered(true).multiple(true).origin("4454718177898995634").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "EmptyLine", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecdc9380L);
    b.class_(true, false, false);
    b.super_("antra.Tictactoe.structure.AbstractCommand", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/1963637181731607424");
    b.version(2);
    b.alias("<empty>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGameEnded() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "GameEnded", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecea9666L);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.LogicalExpression", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/1963637181732525670");
    b.version(2);
    b.alias("gameEnded");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "IfStatement", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3022a9353516e2fL);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.AbstractCommand", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/216782544313609775");
    b.version(2);
    b.aggregate("trueBranch", 0x3022a9353516e4bL).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251fb1L).optional(false).ordered(true).multiple(false).origin("216782544313609803").done();
    b.aggregate("falseBranch", 0x3022a9353516e4dL).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251fb1L).optional(false).ordered(true).multiple(false).origin("216782544313609805").done();
    b.aggregate("condition", 0x1b403d9cecd1ae8aL).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL).optional(false).ordered(true).multiple(false).origin("1963637181730893450").done();
    b.alias("if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "LogicalExpression", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL);
    b.class_(false, true, false);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/1963637181732327373");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMove() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "Move", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8252b4bL);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.AbstractCommand", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/4454718177898998603");
    b.version(2);
    b.property("place", 0x3dd25694a827b731L).type(PrimitiveTypeId.INTEGER).origin("4454718177899165489").done();
    b.alias("move");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "Not", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fccL);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.LogicalExpression", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/1963637181732327372");
    b.version(2);
    b.aggregate("original", 0x1b403d9cece7c122L).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL).optional(false).ordered(true).multiple(false).origin("1963637181732340002").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlayer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "Player", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x27111abcbb8099afL);
    b.class_(false, false, false);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/2815060639985211823");
    b.version(2);
    b.property("player_X_or_O", 0x3dd25694a81cd9b0L).type(PrimitiveTypeId.STRING).origin("4454718177898453424").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "While", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecd851c4L);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.AbstractCommand", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251eedL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/1963637181731328452");
    b.version(2);
    b.aggregate("condition", 0x1b403d9cecd851c5L).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL).optional(false).ordered(true).multiple(false).origin("1963637181731328453").done();
    b.aggregate("body", 0x1b403d9cecd851c7L).target(0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x3dd25694a8251fb1L).optional(false).ordered(true).multiple(false).origin("1963637181731328455").done();
    b.alias("while");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForisTaken() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("antra.Tictactoe", "isTaken", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cecd1ae8eL);
    b.class_(false, false, false);
    b.super_("antra.Tictactoe.structure.LogicalExpression", 0xf1d2a8d3b5f04e2aL, 0x8d81e507cb139506L, 0x1b403d9cece78fcdL);
    b.origin("r:d65f08db-40ed-403a-8fcb-7b3ded91fcc5(antra.Tictactoe.structure)/1963637181730893454");
    b.version(2);
    b.property("place", 0x1b403d9cecd1ff01L).type(PrimitiveTypeId.INTEGER).origin("1963637181730914049").done();
    b.alias("isTaken");
    return b.create();
  }
}
