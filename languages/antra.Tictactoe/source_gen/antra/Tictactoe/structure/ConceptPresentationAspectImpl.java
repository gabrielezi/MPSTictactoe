package antra.Tictactoe.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractCommand;
  private ConceptPresentation props_Board;
  private ConceptPresentation props_CommandList;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_GameEnded;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_LogicalExpression;
  private ConceptPresentation props_Move;
  private ConceptPresentation props_Not;
  private ConceptPresentation props_Player;
  private ConceptPresentation props_While;
  private ConceptPresentation props_isTaken;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractCommand:
        if (props_AbstractCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractCommand = cpb.create();
        }
        return props_AbstractCommand;
      case LanguageConceptSwitch.Board:
        if (props_Board == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Board = cpb.create();
        }
        return props_Board;
      case LanguageConceptSwitch.CommandList:
        if (props_CommandList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CommandList");
          props_CommandList = cpb.create();
        }
        return props_CommandList;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<empty>");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.GameEnded:
        if (props_GameEnded == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("gameEnded");
          props_GameEnded = cpb.create();
        }
        return props_GameEnded;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.LogicalExpression:
        if (props_LogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LogicalExpression = cpb.create();
        }
        return props_LogicalExpression;
      case LanguageConceptSwitch.Move:
        if (props_Move == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("move");
          props_Move = cpb.create();
        }
        return props_Move;
      case LanguageConceptSwitch.Not:
        if (props_Not == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Not");
          props_Not = cpb.create();
        }
        return props_Not;
      case LanguageConceptSwitch.Player:
        if (props_Player == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Player");
          props_Player = cpb.create();
        }
        return props_Player;
      case LanguageConceptSwitch.While:
        if (props_While == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("while");
          props_While = cpb.create();
        }
        return props_While;
      case LanguageConceptSwitch.isTaken:
        if (props_isTaken == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("isTaken");
          props_isTaken = cpb.create();
        }
        return props_isTaken;
    }
    return null;
  }
}
