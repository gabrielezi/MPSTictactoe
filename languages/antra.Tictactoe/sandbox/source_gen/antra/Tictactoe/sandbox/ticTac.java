package antra.Tictactoe.sandbox;

/*Generated by MPS */

import java.util.concurrent.ThreadLocalRandom;
import java.util.Arrays;

public class ticTac {

  /*package*/ static String[] board;
  /*package*/ static String turn;
  /*package*/ static String player;
  /*package*/ static String opPlayer;
  /*package*/ static String winner;

  public static void main(String[] args) {
    board = new String[9];
    turn = "X";
    player = turn;
    winner = null;
    populateEmptyBoard();
    System.out.println("--------------------------------");
    printBoard();
    System.out.println("You are player: " + player);
    if (player.equals("X")) {
      opPlayer = "O";
    } else {
      opPlayer = "X";
    }
    while (!(winner != null)) {
      if (ticTac.isTaken(1)) {
        ticTac.makeMove(4);
        ticTac.opponentMove();
      } else {
        ticTac.makeMove(1);
        ticTac.opponentMove();
      }
      if (ticTac.isTaken(2)) {
        ticTac.makeMove(5);
        ticTac.opponentMove();
      } else {
        ticTac.makeMove(2);
        ticTac.opponentMove();
      }
      ticTac.makeMove(3);
      ticTac.opponentMove();
      ticTac.makeMove(8);
      ticTac.opponentMove();
    }
    if (winner != null) {
      if (winner.equalsIgnoreCase("draw")) {
        System.out.println("It's a draw!");
      } else {
        System.out.println("The winner is player " + winner);
      }
    }
  }

  /*package*/ static void makeMove(int position) {
    if (!((position < 9 && position > 0))) {
      System.out.println("Invalid position");
    }
    if (winner == null) {
      if (board[position - 1].equals(String.valueOf(position))) {
        board[position - 1] = turn;
        System.out.println(turn + "player's move is: " + position);
        if (turn.equals(player)) {
          turn = opPlayer;
        } else {
          turn = player;
        }
        printBoard();
        winner = checkWinner();
      } else {
        System.out.println("Slot already taken");
        System.exit(0);
      }
    }
  }
  /*package*/ static void opponentMove() {
    int randomNumber = ThreadLocalRandom.current().nextInt(1, 9);
    while (!(board[randomNumber - 1].equals(String.valueOf(randomNumber)))) {
      randomNumber = ThreadLocalRandom.current().nextInt(1, 9);
    }
    makeMove(randomNumber);
  }
  /*package*/ static boolean isTaken(int number) {
    if (board[number - 1].equals(String.valueOf(number))) {
      return false;
    } else {
      return true;
    }
  }
  /*package*/ static void populateEmptyBoard() {
    for (int i = 0; i < 9; i++) {
      board[i] = String.valueOf(i + 1);
    }
  }
  /*package*/ static String checkWinner() {
    for (int a = 0; a < 8; a++) {
      String line = null;
      switch (a) {
        case 0:
          line = board[0] + board[1] + board[2];
          break;
        case 1:
          line = board[3] + board[4] + board[5];
          break;
        case 2:
          line = board[6] + board[7] + board[8];
          break;
        case 3:
          line = board[0] + board[3] + board[6];
          break;
        case 4:
          line = board[1] + board[4] + board[7];
          break;
        case 5:
          line = board[2] + board[5] + board[8];
          break;
        case 6:
          line = board[0] + board[4] + board[8];
          break;
        case 7:
          line = board[2] + board[4] + board[6];
          break;
      }
      if (line.equals("XXX")) {
        return "X";
      } else if (line.equals("OOO")) {
        return "O";
      }
    }
    for (int a = 0; a < 9; a++) {
      if (Arrays.asList(board).contains(String.valueOf(a + 1))) {
        break;
      } else if (a == 8) {
        return "draw";
      }
    }
    return null;
  }
  /*package*/ static void printBoard() {
    System.out.println("/---|---|---\\");
    System.out.println("| " + board[0] + " | " + board[1] + " | " + board[2] + " |");
    System.out.println("|-----------|");
    System.out.println("| " + board[3] + " | " + board[4] + " | " + board[5] + " |");
    System.out.println("|-----------|");
    System.out.println("| " + board[6] + " | " + board[7] + " | " + board[8] + " |");
    System.out.println("/---|---|---\\");
  }

}
